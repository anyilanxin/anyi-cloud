<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.anyilanxin.skillfull.logging.modules.manage.mapper.AuthDataMapper">

  <resultMap type="com.anyilanxin.skillfull.logging.modules.manage.entity.AuthDataEntity" id="AuthDataMap">
    <result property="authLogId" column="auth_log_id" jdbcType="VARCHAR"/>
    <result property="logCode" column="log_code" jdbcType="VARCHAR"/>
    <result property="requestIp" column="request_ip" jdbcType="VARCHAR"/>
    <result property="authType" column="auth_type" jdbcType="VARCHAR"/>
    <result property="authTypeDescribe" column="auth_type_describe" jdbcType="VARCHAR"/>
    <result property="authUserId" column="auth_user_id" jdbcType="VARCHAR"/>
    <result property="authUserName" column="auth_user_name" jdbcType="VARCHAR"/>
    <result property="authClientCode" column="auth_client_code" jdbcType="VARCHAR"/>
    <result property="authClientName" column="auth_client_name" jdbcType="VARCHAR"/>
    <result property="authStatus" column="auth_status" jdbcType="INTEGER"/>
    <result property="logData" column="log_data" jdbcType="VARCHAR"/>
    <result property="logOtherData" column="log_other_data" jdbcType="VARCHAR"/>
    <result property="exceptionMessage" column="exception_message" jdbcType="VARCHAR"/>
    <result property="requestStartTime" column="request_start_time" jdbcType="TIMESTAMP"/>
    <result property="costTime" column="cost_time" jdbcType="INTEGER"/>
    <result property="requestEndTime" column="request_end_time" jdbcType="TIMESTAMP"/>
    <result property="createAreaCode" column="create_area_code" jdbcType="VARCHAR"/>
    <result property="createPositionCode" column="create_position_code" jdbcType="VARCHAR"/>
    <result property="createOrgSysCode" column="create_org_sys_code" jdbcType="VARCHAR"/>
    <result property="createSystemCode" column="create_system_code" jdbcType="VARCHAR"/>
    <result property="createTenantId" column="create_tenant_id" jdbcType="VARCHAR"/>
    <result property="createUserId" column="create_user_id" jdbcType="VARCHAR"/>
    <result property="createUserName" column="create_user_name" jdbcType="VARCHAR"/>
    <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    <result property="updateUserId" column="update_user_id" jdbcType="VARCHAR"/>
    <result property="updateUserName" column="update_user_name" jdbcType="VARCHAR"/>
    <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    <result property="remark" column="remark" jdbcType="VARCHAR"/>
    <result property="delFlag" column="del_flag" jdbcType="INTEGER"/>
  </resultMap>

  <!-- @formatter:off -->
  <!--数据库字段-->
  <sql id="Column_List">
    auth_log_id, log_code, request_ip, auth_type, auth_type_describe, auth_user_id, auth_user_name,
    auth_client_code, auth_client_name, auth_status, log_data, log_other_data, exception_message,
    request_start_time, cost_time, request_end_time, create_area_code, create_position_code,
    create_org_sys_code, create_system_code, create_tenant_id, create_user_id, create_user_name,
    create_time, update_user_id, update_user_name, update_time, remark, del_flag
  </sql>

  <!--数据库字段待别名-->
  <sql id="Column_List_Ali">
    ali.auth_log_id, ali.log_code, ali.request_ip, ali.auth_type, ali.auth_type_describe,
    ali.auth_user_id, ali.auth_user_name, ali.auth_client_code, ali.auth_client_name, ali.auth_status,
    ali.log_data, ali.log_other_data, ali.exception_message, ali.request_start_time, ali.cost_time,
    ali.request_end_time, ali.create_area_code, ali.create_position_code, ali.create_org_sys_code,
    ali.create_system_code, ali.create_tenant_id, ali.create_user_id, ali.create_user_name, ali.create_time,
    ali.update_user_id, ali.update_user_name, ali.update_time, ali.remark, ali.del_flag
  </sql>

  <!--数据库字段-->
  <sql id="Column_List_Page_Ali">
    ali.auth_log_id, ali.log_code, ali.request_ip,  ali.auth_type, ali.auth_type_describe,
    ali.auth_user_id, ali.auth_user_name, ali.auth_client_code, ali.auth_client_name, ali.auth_status,
    ali.request_start_time, ali.cost_time,
    ali.request_end_time, ali.create_area_code, ali.create_position_code, ali.create_org_sys_code,
    ali.create_system_code, ali.create_tenant_id, ali.create_user_id, ali.create_user_name, ali.create_time,
    ali.update_user_id, ali.update_user_name, ali.update_time, ali.remark, ali.del_flag
  </sql>


    <!-- 批量插入日志信息 -->
    <insert id="insertBatch">
        INSERT INTO logging_auth_data
        ( auth_log_id, log_code, request_ip,
        auth_type, auth_type_describe, auth_user_id, auth_user_name,
        auth_client_code, auth_client_name, auth_status, log_data,
        log_other_data, exception_message, request_start_time, cost_time,
        request_end_time, create_area_code, create_position_code, create_org_sys_code,
        create_system_code, create_tenant_id, create_user_id, create_user_name,
        create_time, remark
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.authLogId}, #{item.logCode}, #{item.requestIp},
            #{item.authType}, #{item.authTypeDescribe}, #{item.authUserId}, #{item.authUserName},
            #{item.authClientCode}, #{item.authClientName}, #{item.authStatus},#{item.logData},
            #{item.logOtherData}, #{item.exceptionMessage}, #{item.requestStartTime}, #{item.costTime},
            #{item.requestEndTime}, #{item.createAreaCode}, #{item.createPositionCode}, #{item.createOrgSysCode},
            #{item.createSystemCode}, #{item.createTenantId}, #{item.createUserId}, #{item.createUserName},
            #{item.createTime}, #{item.remark}
            )
        </foreach>
    </insert>


    <!--通过实体作为筛选条件分页查询-->
    <select id="pageByModel" resultType="com.anyilanxin.skillfull.logging.modules.manage.service.dto.AuthDataPageDto">
        SELECT
        <include refid="Column_List_Page_Ali"/>
        FROM logging_auth_data ali
        <where>
            ali.del_flag = 0
            <if test="query.logCode != null and query.logCode != ''">
                AND LOCATE(#{query.logCode, jdbcType=VARCHAR}, ali.log_code) &gt; 0
            </if>
            <if test="query.requestIp != null and query.requestIp != ''">
                AND LOCATE(#{query.requestIp, jdbcType=VARCHAR}, ali.request_ip) &gt; 0
            </if>
            <if test="query.authType != null and query.authType != ''">
                AND ali.auth_type = #{query.authType, jdbcType=VARCHAR}
            </if>
            <if test="query.authUserName != null and query.authUserName != ''">
                AND LOCATE(#{query.authUserName, jdbcType=VARCHAR}, ali.auth_user_name) &gt; 0
            </if>
            <if test="query.authClientName != null and query.authClientName != ''">
                AND LOCATE(#{query.authClientName, jdbcType=VARCHAR}, ali.auth_client_name) &gt; 0
            </if>
            <if test="query.authStatus != null">
                AND ali.auth_status = #{query.authStatus, jdbcType=INTEGER}
            </if>
            <if test="query.startTime != null">
                AND ali.request_start_time &gt;= #{query.startTime, jdbcType=TIMESTAMP}
            </if>
            <if test="query.endTime != null">
                AND ali.request_start_time &lt;= #{query.endTime, jdbcType=TIMESTAMP}
            </if>
        </where>
    </select>


    <!-- 通过授权日志id物理删除 -->
    <delete id="physicalDeleteById">
        DELETE
        FROM logging_auth_data
        WHERE auth_log_id = #{id, jdbcType=VARCHAR}
    </delete>


    <!-- 通过字典id物理批量删除 -->
    <delete id="physicalDeleteBatchIds">
        DELETE
        FROM logging_auth_data
        WHERE auth_log_id IN
        <foreach collection="coll" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>


    <!-- 通过id逻辑删除 -->
    <update id="deleteById">
        UPDATE logging_auth_data
        <set>
            del_flag = 1,
        </set>
        WHERE auth_log_id = #{authLogId, jdbcType=VARCHAR}
    </update>


    <!-- 通过id批量逻辑删除 -->
    <update id="deleteBatchIds">
        UPDATE logging_auth_data
        <set>
            del_flag = 1,
        </set>
        WHERE auth_log_id IN
        <foreach collection="coll" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    <!-- @formatter:off -->
</mapper>
