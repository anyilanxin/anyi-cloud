plugins {
    id 'java-platform'
}

apply plugin: 'java-platform'
apply plugin: 'maven-publish'

description = "AnYi Cloud Dependencies Bom"

def pom = true

javaPlatform {
    allowDependencies()
}


dependencies {
    constraints {
        def allProjects = []
        rootProject.allprojects.each {
            if (it.parent != null) {
                allProjects.add(":${it.parent.name}:${it.name}")
            }
        }

        // 基础核心模块
        if (file("${rootDir}/anyi-cloud-corebase-modules").directory) {
            file("${rootDir}/anyi-cloud-corebase-modules").eachDir {
                if (allProjects.contains(":anyi-cloud-corebase-modules:${it.name}")) {
                    api project(":anyi-cloud-corebase-modules:${it.name}")
                }

            }
        }

        // 授权核心模块
        if (file("${rootDir}/anyi-cloud-coreauth-modules").directory) {
            file("${rootDir}/anyi-cloud-coreauth-modules").eachDir {
                if (allProjects.contains(":anyi-cloud-coreauth-modules:${it.name}")) {
                    api project(":anyi-cloud-coreauth-modules:${it.name}")
                }
            }
        }

        // 模块间调用适配层接口
        if (file("${rootDir}/anyi-cloud-adapter-modules").directory) {
            file("${rootDir}/anyi-cloud-adapter-modules").eachDir {
                if (allProjects.contains(":anyi-cloud-adapter-modules:${it.name}")) {
                    api project(":anyi-cloud-adapter-modules:${it.name}")
                }
            }
        }

        // 模块间调用远程方式适配层
        if (file("${rootDir}/anyi-cloud-adapterrpc-modules").directory) {
            file("${rootDir}/anyi-cloud-adapterrpc-modules").eachDir {
                if (allProjects.contains(":anyi-cloud-adapterrpc-modules:${it.name}")) {
                    api project(":anyi-cloud-adapterrpc-modules:${it.name}")
                }
            }
        }


        // 第三方
        def springdoc = "2.5.0"
        api "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdoc}"
        api "org.springdoc:springdoc-openapi-starter-webflux-ui:${springdoc}"
        api "org.springdoc:springdoc-openapi-starter-common:${springdoc}"

        def mapstruct = "1.5.5.Final"
        api "org.mapstruct:mapstruct:${mapstruct}"
        api "org.mapstruct:mapstruct-processor:${mapstruct}"

        def mapstructPlus = "1.4.0"
        api "io.github.linpeilie:mapstruct-plus-spring-boot-starter:${mapstructPlus}"
        api "io.github.linpeilie:mapstruct-plus-processor:${mapstructPlus}"

        def camunda = "7.21.0"
        api "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:${camunda}"
        api "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:${camunda}"
        api "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-external-task-client:${camunda}"
        api 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'

        def mybatisPlus = "3.5.6"
        api "com.baomidou:mybatis-plus-extension:${mybatisPlus}"
        api "com.baomidou:mybatis-plus-annotation:${mybatisPlus}"
        api "com.baomidou:mybatis-plus-spring-boot3-starter:${mybatisPlus}"
        api "com.baomidou:dynamic-datasource-spring-boot3-starter:4.3.0"

        def mybatisFlex = "1.8.7"
        api "com.mybatis-flex:mybatis-flex-spring-boot-starter:${mybatisFlex}"
        api "com.mybatis-flex:mybatis-flex-processor:${mybatisFlex}"

        def zhxuOkhttps = "4.0.2"
        api "cn.zhxu:okhttps:${zhxuOkhttps}"
        api "cn.zhxu:okhttps-fastjson2:${zhxuOkhttps}"
        api "cn.zhxu:okhttps-stomp:${zhxuOkhttps}"
        api 'com.squareup.okio:okio:3.6.0'
        api 'com.squareup.okhttp3:logging-interceptor:4.12.0'

        api "com.alibaba:druid-spring-boot-3-starter:1.2.21"
        api "com.alibaba:easyexcel:3.3.4"
        api "com.deepoove:poi-tl:1.12.2"
        api 'org.dromara.x-easypdf:x-easypdf:3.0.0'
        api "org.reflections:reflections:0.10.2"
        api "de.codecentric:spring-boot-admin-starter-server:3.2.3"
        api "me.zhyd.oauth:JustAuth:1.16.6"
        api "com.aliyun:aliyun-java-sdk-core:4.6.4"
        api "com.drewnoakes:metadata-extractor:2.19.0"
        api "io.seata:seata-spring-boot-starter:2.0.0"
        api "io.github.openfeign:feign-okhttp:13.2.1"
        api "com.xuxueli:xxl-job-core:2.4.1"
        api "net.dreamlu:mica-ip2region:3.2.4"
        api "com.tencentcloudapi:tencentcloud-sdk-java:4.0.11"
        api "com.sun.xml.ws:jaxws-rt:4.0.2"
        api 'org.redisson:redisson-spring-boot-starter:3.27.2'
        api 'p6spy:p6spy:3.9.1'
        api 'org.webjars:bootstrap:5.3.3'
    }

    dependencies {
        api "org.springdoc:springdoc-openapi-starter-common"
        api 'com.alibaba.fastjson2:fastjson2:2.0.48'
        api 'com.google.guava:guava:33.1.0-jre'
        api 'org.dromara.hutool:hutool-all:6.0.0-M12'
        api 'org.apache.commons:commons-lang3:3.14.0'
        api 'commons-codec:commons-codec:1.16.1'
        api 'commons-io:commons-io:2.16.0'
        api 'org.apache.commons:commons-pool2:2.12.0'
        api 'org.slf4j:slf4j-api:2.0.12'

        def log4j = "2.23.1"
        api "org.apache.logging.log4j:log4j-api:${log4j}"
        api "org.apache.logging.log4j:log4j-to-slf4j:${log4j}"
        api "org.apache.logging.log4j:log4j-core:${log4j}"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.javaPlatform
        }
    }
    repositories {
        maven {
            allowInsecureProtocol = true
            credentials {
                username = rootProject.ext.repo['username']
                password = rootProject.ext.repo['password']
            }
            url = version.endsWith('SNAPSHOT') ? rootProject.ext.repo['snapshotsRepoUrl'] : rootProject.ext.repo['releasesRepoUrl']
        }
    }
}
