import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'java-library'
    id "com.github.hierynomus.license" version "0.16.1"
    id "com.diffplug.spotless" version "6.18.0"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.bmuschko.docker-spring-boot-application' version '8.1.0'
}


apply from: "config.gradle"


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


// 批量构建镜像
tasks.register('dockerImageAll') {
    subprojects.findAll { project ->
        def bootProject = rootProject.ext.bootInfo['anyi-cloud-service-modules:' + project.name]
        if (bootProject != null && Boolean.parseBoolean(String.valueOf(bootProject))) {
            dependsOn ':anyi-cloud-service-modules:' + project.name + ':dockerBuildImage'
        }
    }
}


// 批量构建镜像并推送到仓库
tasks.register('dockerPushImageAll') {
    subprojects.findAll { project ->
        def bootProject = rootProject.ext.bootInfo['anyi-cloud-service-modules:' + project.name]
        if (bootProject != null && Boolean.parseBoolean(String.valueOf(bootProject))) {
            dependsOn ':anyi-cloud-service-modules:' + project.name + ':dockerPushImage'
        }
    }
}


// 批量构建bootJar
tasks.register('buildBootJarAll') {
    subprojects.findAll { project ->
        def bootProject = rootProject.ext.bootInfo['anyi-cloud-service-modules:' + project.name]
        if (bootProject != null && Boolean.parseBoolean(String.valueOf(bootProject))) {
            dependsOn ':anyi-cloud-service-modules:' + project.name + ':bootJar'
        }
    }
}

spotless {
    java {
        target project.fileTree(project.rootDir) {
            include '**/*.java'
        }
        eclipse('4.26').configFile(rootProject.file('gradle/wrapper/formatter.xml'))
        indentWithSpaces()
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        toggleOffOn("formatting:off", "formatting:on")
        targetExclude("**/build/generated/source*/**/*.*")
    }
}


// 所有项目下载仓库
allprojects {
    apply plugin: "com.github.hierynomus.license"
    // 指定所有项目maven仓库
    repositories {
        mavenLocal()
        maven {
            content {
                excludeGroupByRegex "org\\.camunda.*"
                excludeGroup "org.springdoc"
            }
            url 'https://maven.aliyun.com/repository/central/'
        }
        mavenCentral()
    }
    // 指定编译编码
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }
    // 编译jdk版本
    sourceCompatibility = '11'
    targetCompatibility = '11'
    // 项目全局信息
    group = 'com.anyilanxin.skillfull'

    license {
        header = rootProject.file('gradle/wrapper/LICENSE.text')
        headerDefinitions {
            anyi_custom {
                firstLine = "/*"
                endLine = " */"
                beforeEachLine = " * "
                firstLineDetectionPattern = "/\\*\$"
                lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
                allowBlankLines = false
                isMultiline = true
            }
        }
        mapping {
            java = 'anyi_custom'
        }
        includes(["**/*.java", "**/*.xml"])
    }
}


subprojects {
    apply plugin: "java"
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.bmuschko.docker-spring-boot-application'

    jar { enabled = true }
    bootJar { enabled = false }

    // 处理非resources下的mapper xml文件问题
    tasks.register('mapperXmlCopy', Copy) {
        copy {
            from("src/main/java") { include("**/xml/*.xml") }
            into("${buildDir}/classes/java/main")
        }
    }

    // docker打包
    def dockerInfo = rootProject.ext.docker[dockerEnv]
    // jar名称
    def jarBaseName = bootJar.archiveBaseName.get()
    // jar版本号
    def bootProject = rootProject.ext.bootInfo['anyi-cloud-service-modules:' + jarBaseName]
    if (bootProject != null && Boolean.parseBoolean(String.valueOf(bootProject))) {
        docker {
            springBootApplication {
                baseImage = dockerInfo.baseImage
                ports = [80]
                images = [dockerInfo.images + jarBaseName + ":" + bootProject['version']]
            }
            if (dockerInfo.isRemortDocker) {
                url.set(dockerInfo.remortDocker)
            }
            if (dockerInfo.credentials != null) {
                registryCredentials dockerInfo.credentials
            }
        }
    }

    // 进行配置文件变量替换
    processResources {
        filteringCharset = 'UTF-8'
        include('*.yml', '*.yaml', 'META-INF/**', 'i18n/**', "jwt.jks", 'template/**', 'banner.txt')
        // 只处理yml、yaml文件替换
        filesMatching('*.yml') {
            filter(
                    ReplaceTokens,
                    "tokens": [
                            version: bootJar.archiveVersion.get(),
                            name   : bootJar.archiveBaseName.get()
                    ],
                    "beginToken": "#@",
                    "endToken": "@#"
            )
        }
        filesMatching('*.yaml') {
            filter(
                    ReplaceTokens,
                    "tokens": [
                            version: bootJar.archiveVersion.get(),
                            name   : bootJar.archiveBaseName.get()
                    ],
                    "beginToken": "#@",
                    "endToken": "@#"
            )
        }
    }

    test {
        useJUnitPlatform()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    // cloud依赖管理
    dependencyManagement {
        imports {
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
            mavenBom "com.alibaba.cloud:aliyun-spring-boot-dependencies:${springAlibabaVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    // 公共依赖
    dependencies {
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        annotationProcessor "org.projectlombok:lombok"
        annotationProcessor rootProject.ext.dependencies["mapstruct"]
        annotationProcessor rootProject.ext.dependencies["mapstruct-processor"]

        compileOnly "org.springframework.boot:spring-boot-configuration-processor"
        compileOnly "org.projectlombok:lombok"
        compileOnly rootProject.ext.dependencies["mapstruct"]
        compileOnly rootProject.ext.dependencies["mapstruct-processor"]

        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation 'org.springframework.boot:spring-boot-configuration-processor'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.cloud:spring-cloud-starter'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
        implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
        implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
        implementation 'org.springframework.retry:spring-retry'

        implementation rootProject.ext.dependencies["guava"]
        implementation rootProject.ext.dependencies["hutool-all"]
        implementation rootProject.ext.dependencies["commons-lang3"]
        implementation rootProject.ext.dependencies["commons-codec"]
        implementation rootProject.ext.dependencies["springdoc-openapi-common"]
        implementation rootProject.ext.dependencies["fastjson2"]
        implementation rootProject.ext.dependencies["fastjson"]
        implementation rootProject.ext.dependencies["slf4j-api"]
        implementation rootProject.ext.dependencies["commons-io"]
        implementation rootProject.ext.dependencies["commons-pool2"]
        implementation rootProject.ext.dependencies["bcprov-jdk14"]
        implementation rootProject.ext.dependencies["log4j-api"]
        implementation rootProject.ext.dependencies["log4j-to-slf4j"]
        implementation rootProject.ext.dependencies["log4j-core"]

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'org.springframework.amqp:spring-rabbit-test'
        testImplementation 'org.projectlombok:lombok'
        testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    }
}









