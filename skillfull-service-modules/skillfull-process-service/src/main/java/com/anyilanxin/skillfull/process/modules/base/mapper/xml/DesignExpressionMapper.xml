<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.anyilanxin.skillfull.process.modules.base.mapper.DesignExpressionMapper">
  <resultMap type="com.anyilanxin.skillfull.process.modules.base.entity.DesignExpressionEntity"
             id="DesignExpressionMap">
    <result property="expressionId" column="expression_id" jdbcType="VARCHAR"/>
    <result property="handleType" column="handle_type" jdbcType="INTEGER"/>
    <result property="implementClass" column="implement_class" jdbcType="VARCHAR"/>
    <result property="example" column="example" jdbcType="VARCHAR"/>
    <result property="remark" column="remark" jdbcType="VARCHAR"/>
    <result property="uniqueHelp" column="unique_help" jdbcType="VARCHAR"/>
    <result property="createAreaCode" column="create_area_code" jdbcType="VARCHAR"/>
    <result property="createPositionCode" column="create_position_code" jdbcType="VARCHAR"/>
    <result property="createOrgSysCode" column="create_org_sys_code" jdbcType="VARCHAR"/>
    <result property="createSystemCode" column="create_system_code" jdbcType="VARCHAR"/>
    <result property="createUserId" column="create_user_id" jdbcType="VARCHAR"/>
    <result property="createUserName" column="create_user_name" jdbcType="VARCHAR"/>
    <result property="createTenantId" column="create_tenant_id" jdbcType="VARCHAR"/>
    <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    <result property="updateUserId" column="update_user_id" jdbcType="VARCHAR"/>
    <result property="updateUserName" column="update_user_name" jdbcType="VARCHAR"/>
    <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    <result property="delFlag" column="del_flag" jdbcType="INTEGER"/>
    <result property="expressionName" column="expression_name" jdbcType="VARCHAR"/>
    <result property="expressionType" column="expression_type" jdbcType="INTEGER"/>
    <result property="elExpressionValue" column="el_expression_value" jdbcType="VARCHAR"/>
    <result property="expressionState" column="expression_state" jdbcType="INTEGER"/>
  </resultMap>

  <!-- @formatter:off -->
    <!--数据库字段-->
    <sql id="Column_List">
        expression_id, handle_type, implement_class, example, remark, unique_help, create_area_code, create_position_code,
        create_org_sys_code, create_system_code, create_user_id, create_user_name, create_tenant_id,
        create_time, update_user_id, update_user_name, update_time, del_flag, expression_name, expression_type,
        el_expression_value, expression_state
    </sql>

    <!--数据库字段待别名-->
    <sql id="Column_List_Ali">
        ali.expression_id, ali.handle_type, ali.implement_class, ali.example, ali.remark, ali.unique_help,
        ali.create_area_code, ali.create_position_code, ali.create_org_sys_code, ali.create_system_code,
        ali.create_user_id, ali.create_user_name, ali.create_tenant_id, ali.create_time, ali.update_user_id,
        ali.update_user_name, ali.update_time, ali.del_flag, ali.expression_name, ali.expression_type,
        ali.el_expression_value, ali.expression_state
    </sql>

     <!--数据库字段-->
    <sql id="Column_List_Page_Ali">
        ali.expression_id, ali.handle_type, ali.implement_class, ali.example, ali.remark, ali.unique_help,
        ali.create_area_code, ali.create_position_code, ali.create_org_sys_code, ali.create_system_code,
        ali.create_user_id, ali.create_user_name, ali.create_tenant_id, ali.create_time, ali.update_user_id,
        ali.update_user_name, ali.update_time, ali.del_flag, ali.expression_name, ali.expression_type,
        ali.el_expression_value, ali.expression_state
    </sql>


    <!--通过实体作为筛选条件分页查询-->
    <select id="pageByModel" resultType="com.anyilanxin.skillfull.process.modules.base.service.dto.DesignExpressionPageDto">
        SELECT
             <include refid="Column_List_Page_Ali"/>
        FROM act_custom_design_expression ali
        <where>
             ali.del_flag = 0
          <if test="query.handleType != null">
             AND ali.handle_type = #{query.handleType, jdbcType=INTEGER}
          </if>
          <if test="query.keyword != null and query.keyword != ''">
             AND (
             LOCATE(#{query.keyword, jdbcType=VARCHAR}, ali.expression_name) &gt; 0
             OR
             LOCATE(#{query.keyword, jdbcType=VARCHAR}, ali.el_expression_value) &gt; 0
             )
          </if>
          <if test="query.expressionType != null">
             AND ali.expression_type = #{query.expressionType, jdbcType=INTEGER}
          </if>
          <if test="query.expressionState != null">
             AND ali.expression_state = #{query.expressionState, jdbcType=INTEGER}
          </if>
        </where>
    </select>


    <!-- 通过表达式id物理删除 -->
    <delete id="physicalDeleteById">
        DELETE
        FROM act_custom_design_expression
        WHERE expression_id = #{id, jdbcType=VARCHAR}
    </delete>


    <!-- 通过字典id物理批量删除 -->
    <delete id="physicalDeleteBatchIds">
        DELETE
        FROM  act_custom_design_expression
        WHERE expression_id IN
        <foreach collection="coll" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>


    <!-- 通过id逻辑删除 -->
    <update id="deleteById">
        UPDATE act_custom_design_expression
        <set>
            del_flag = 1,
            unique_help = expression_id,
         </set>
        WHERE expression_id = #{expressionId, jdbcType=VARCHAR}
    </update>


    <!-- 通过id批量逻辑删除 -->
    <update id="deleteBatchIds">
        UPDATE act_custom_design_expression
        <set>
            del_flag = 1,
            unique_help = expression_id,
        </set>
        WHERE expression_id IN
        <foreach collection="coll" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    <!-- @formatter:off -->
</mapper>
